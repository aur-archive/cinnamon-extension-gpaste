--- gpaste-2.5.0.orig/configure.ac
+++ gpaste-2.5.0/configure.ac
@@ -92,8 +92,11 @@ AC_SUBST([dbusservicesdir], [$with_dbuss
 AC_ARG_ENABLE(applet, AS_HELP_STRING([--enable-applet], [Enable gpaste-applet]), enable_applet=$enableval, enable_applet=no)
 AM_CONDITIONAL(ENABLE_APPLET, test x$enable_applet = xyes)
 
-AC_ARG_ENABLE(gnome-shell-extension, AS_HELP_STRING([--disable-gnome-shell-extension], [Disable gnome-shell extension]), enable_extension=$enableval, enable_extension=yes)
-AM_CONDITIONAL(ENABLE_EXTENSION, test x$enable_extension = xyes)
+AC_ARG_ENABLE(gnome-shell-extension, AS_HELP_STRING([--disable-gnome-shell-extension], [Disable gnome-shell extension]), enable_gnome_shell_extension=$enableval, enable_gnome_shell_extension=yes)
+AM_CONDITIONAL(ENABLE_GNOME_SHELL_EXTENSION, test x$enable_gnome_shell_extension = xyes)
+
+AC_ARG_ENABLE(cinnamon-extension, AS_HELP_STRING([--disable-cinnamon-extension], [Disable cinnamon extension]), enable_cinnamon_extension=$enableval, enable_cinnamon_extension=yes)
+AM_CONDITIONAL(ENABLE_CINNAMON_EXTENSION, test x$enable_cinnamon_extension = xyes)
 
 AC_ARG_ENABLE(vala, AS_HELP_STRING([--enable-vala], [Enable vapi generation]), enable_vala=$enableval, enable_vala=no)
 AM_CONDITIONAL(ENABLE_VALA, test x$enable_vala != xno)
@@ -123,6 +126,7 @@ AC_MSG_RESULT([
         vapi generator:         ${VAPIGEN}
 
         Legacy applet:          ${enable_applet}
-        Gnome-Shell extension:  ${enable_extension}
+        Gnome-Shell extension:  ${enable_gnome_shell_extension}
+        Cinnamon extension:     ${enable_cinnamon_extension}
         Rebuild vapi:           ${enable_vala}
 ])
--- gpaste-2.5.0.orig/Makefile.am
+++ gpaste-2.5.0/Makefile.am
@@ -31,6 +31,7 @@ LIBGPASTE_AGE=0
 applicationsdir = $(datadir)/applications
 autostartdir = $(sysconfdir)/xdg/autostart
 gnomeshelldir = $(datadir)/gnome-shell/extensions/GPaste@gnome-shell-extensions.gnome.org
+cinnamondir = $(datadir)/cinnamon/extensions/GPaste@cinnamon.org
 
 # Data stuff
 
@@ -56,12 +57,18 @@ gpaste_1_parts += data/gpaste-applet.1.p
 autostart_DATA = $(nodist_autostart_in_files:.desktop.in=.desktop)
 endif
 
-if ENABLE_EXTENSION
+if ENABLE_GNOME_SHELL_EXTENSION
 dist_gnomeshell_DATA = \
 	src/applets/gnome-shell/extension.js
 nodist_gnomeshell_DATA = src/applets/gnome-shell/metadata.json
 endif
 
+if ENABLE_CINNAMON_EXTENSION
+dist_cinnamon_DATA = \
+	src/applets/cinnamon/extension.js
+nodist_cinnamon_DATA = src/applets/cinnamon/metadata.json
+endif
+
 libgpaste_libgpaste_la_public_headers = \
 	libgpaste/gpaste.h \
 	libgpaste/gpaste-clipboard.h \
@@ -233,12 +240,14 @@ libgpaste_libgpaste_la_DEPENDENCIES = ${
 
 EXTRA_DIST = \
 	$(noinst_DATA) \
+	autogen.sh \
 	data/org.gnome.GPaste.gschema.xml.in.in \
 	data/org.gnome.GPaste.service.in \
 	data/gpaste-applet.desktop.in.in \
 	data/gpaste-settings.desktop.in.in \
 	data/gpaste.1.part data/gpaste-applet.1.part \
 	src/applets/gnome-shell/metadata.json.in \
+	src/applets/cinnamon/metadata.json.in \
 	$(libgpaste_libgpaste_la_private_headers) \
 	libgpaste/libgpaste.sym \
 	vapi/config.vapi
@@ -256,6 +265,7 @@ CLEANFILES = \
 	$(gsettings_SCHEMAS) \
 	$(nodist_dbusservices_DATA) \
 	src/applets/gnome-shell/metadata.json \
+	src/applets/cinnamon/metadata.json \
 	gschemas.compiled
 
 # Special rules
@@ -271,6 +281,9 @@ SUFFIXES = .service .service.in .json .j
 .json.in.json:
 	$(AM_V_GEN) $(MKDIR_P) src/applets/gnome-shell && \
 	    $(SED) -e 's,[@]localedir[@],$(localedir),g' \
+		-e 's,[@]pkglibexecdir[@],$(pkglibexecdir),g' <$< >$@ \
+	$(AM_V_GEN) $(MKDIR_P) src/applets/cinnamon && \
+	    $(SED) -e 's,[@]localedir[@],$(localedir),g' \
 		-e 's,[@]pkglibexecdir[@],$(pkglibexecdir),g' <$< >$@
 .desktop.in.in.desktop.in:
 	$(AM_V_GEN) $(SED) -e 's,[@]pkglibexecdir[@],$(pkglibexecdir),g' < $< > $@
--- gpaste-2.5.0.orig/configure
+++ gpaste-2.5.0/configure
@@ -679,8 +679,10 @@ LTLIBOBJS
 LIBOBJS
 ENABLE_VALA_FALSE
 ENABLE_VALA_TRUE
-ENABLE_EXTENSION_FALSE
-ENABLE_EXTENSION_TRUE
+ENABLE_CINNAMON_EXTENSION_FALSE
+ENABLE_CINNAMON_EXTENSION_TRUE
+ENABLE_GNOME_SHELL_EXTENSION_FALSE
+ENABLE_GNOME_SHELL_EXTENSION_TRUE
 ENABLE_APPLET_FALSE
 ENABLE_APPLET_TRUE
 dbusservicesdir
@@ -880,6 +882,7 @@ enable_schemas_compile
 with_dbusservicesdir
 enable_applet
 enable_gnome_shell_extension
+enable_cinnamon_extension
 enable_vala
 '
       ac_precious_vars='build_alias
@@ -1547,6 +1550,8 @@ Optional Features:
   --enable-applet         Enable gpaste-applet
   --disable-gnome-shell-extension
                           Disable gnome-shell extension
+  --disable-cinnamon-extension
+                          Disable cinnamon extension
   --enable-vala           Enable vapi generation
 
 Optional Packages:
@@ -14502,17 +14507,33 @@ fi
 
 # Check whether --enable-gnome-shell-extension was given.
 if test "${enable_gnome_shell_extension+set}" = set; then :
-  enableval=$enable_gnome_shell_extension; enable_extension=$enableval
+  enableval=$enable_gnome_shell_extension; enable_gnome_shell_extension=$enableval
 else
-  enable_extension=yes
+  enable_gnome_shell_extension=yes
 fi
 
- if test x$enable_extension = xyes; then
-  ENABLE_EXTENSION_TRUE=
-  ENABLE_EXTENSION_FALSE='#'
+ if test x$enable_gnome_shell_extension = xyes; then
+  ENABLE_GNOME_SHELL_EXTENSION_TRUE=
+  ENABLE_GNOME_SHELL_EXTENSION_FALSE='#'
 else
-  ENABLE_EXTENSION_TRUE='#'
-  ENABLE_EXTENSION_FALSE=
+  ENABLE_GNOME_SHELL_EXTENSION_TRUE='#'
+  ENABLE_GNOME_SHELL_EXTENSION_FALSE=
+fi
+
+
+# Check whether --enable-cinnamon-extension was given.
+if test "${enable_cinnamon_extension+set}" = set; then :
+  enableval=$enable_cinnamon_extension; enable_cinnamon_extension=$enableval
+else
+  enable_cinnamon_extension=yes
+fi
+
+ if test x$enable_cinnamon_extension = xyes; then
+  ENABLE_CINNAMON_EXTENSION_TRUE=
+  ENABLE_CINNAMON_EXTENSION_FALSE='#'
+else
+  ENABLE_CINNAMON_EXTENSION_TRUE='#'
+  ENABLE_CINNAMON_EXTENSION_FALSE=
 fi
 
 
@@ -14671,8 +14692,12 @@ if test -z "${ENABLE_APPLET_TRUE}" && te
   as_fn_error $? "conditional \"ENABLE_APPLET\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
 fi
-if test -z "${ENABLE_EXTENSION_TRUE}" && test -z "${ENABLE_EXTENSION_FALSE}"; then
-  as_fn_error $? "conditional \"ENABLE_EXTENSION\" was never defined.
+if test -z "${ENABLE_GNOME_SHELL_EXTENSION_TRUE}" && test -z "${ENABLE_GNOME_SHELL_EXTENSION_FALSE}"; then
+  as_fn_error $? "conditional \"ENABLE_GNOME_SHELL_EXTENSION\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${ENABLE_CINNAMON_EXTENSION_TRUE}" && test -z "${ENABLE_CINNAMON_EXTENSION_FALSE}"; then
+  as_fn_error $? "conditional \"ENABLE_CINNAMON_EXTENSION\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
 fi
 if test -z "${ENABLE_VALA_TRUE}" && test -z "${ENABLE_VALA_FALSE}"; then
@@ -16965,7 +16990,8 @@ fi
         vapi generator:         ${VAPIGEN}
 
         Legacy applet:          ${enable_applet}
-        Gnome-Shell extension:  ${enable_extension}
+        Gnome-Shell extension:  ${enable_gnome_shell_extension}
+        Cinnamon extension:     ${enable_cinnamon_extension}
         Rebuild vapi:           ${enable_vala}
 " >&5
 $as_echo "
@@ -16986,6 +17012,7 @@ $as_echo "
         vapi generator:         ${VAPIGEN}
 
         Legacy applet:          ${enable_applet}
-        Gnome-Shell extension:  ${enable_extension}
+        Gnome-Shell extension:  ${enable_gnome_shell_extension}
+        Cinnamon extension:     ${enable_cinnamon_extension}
         Rebuild vapi:           ${enable_vala}
 " >&6; }
--- /dev/null
+++ gpaste-2.5.0/src/applets/cinnamon/metadata.json.in
@@ -0,0 +1,2 @@
+{"cinnamon-version": ["1.1.3", "1.2", "1.3.0", "1.3.1", "1.4.0"], "uuid": "GPaste@cinnamon.org", "name": "GPaste", "description": "Clipboard management system", "url": "https://launchpad.net/~merlwiz79/+archive/cinnamon-ppa", "localedir": "@localedir@"}
+
--- /dev/null
+++ gpaste-2.5.0/src/applets/cinnamon/extension.js
@@ -0,0 +1,209 @@
+/*
+ *      This file is part of GPaste.
+ *
+ *      Copyright 2011 Marc-Antoine Perennou <Marc-Antoine@Perennou.com>
+ *
+ *      GPaste is free software: you can redistribute it and/or modify
+ *      it under the terms of the GNU General Public License as published by
+ *      the Free Software Foundation, either version 3 of the License, or
+ *      (at your option) any later version.
+ *
+ *      GPaste is distributed in the hope that it will be useful,
+ *      but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *      GNU General Public License for more details.
+ *
+ *      You should have received a copy of the GNU General Public License
+ *      along with GPaste.  If not, see <http://www.gnu.org/licenses/>.
+ */
+/* -*- mode: js2; js2-basic-offset: 4; indent-tabs-mode: nil -*- */
+
+const StatusIconDispatcher = imports.ui.statusIconDispatcher;
+const Main = imports.ui.main;
+const Panel = imports.ui.panel;
+const Lang = imports.lang;
+const Gio = imports.gi.Gio;
+const Pango = imports.gi.Pango;
+const PanelMenu = imports.ui.panelMenu;
+const PopupMenu = imports.ui.popupMenu;
+const Gettext = imports.gettext;
+
+const _ = Gettext.domain('GPaste').gettext;
+const BUS_NAME = 'org.gnome.GPaste';
+const OBJECT_PATH = '/org/gnome/GPaste';
+
+const GPasteInterface =
+    <interface name="org.gnome.GPaste">
+        <method name="GetHistory">
+            <arg type="as" direction="out" />
+        </method>
+        <method name="Select">
+            <arg type="u" direction="in" />
+        </method>
+        <method name="Delete">
+            <arg type="u" direction="in" />
+        </method>
+        <method name="Empty" />
+        <method name="Track">
+            <arg type="b" direction="in" />
+        </method>
+        <method name="OnExtensionStateChanged">
+            <arg type="b" direction="in" />
+        </method>
+        <signal name="Changed" />
+        <signal name="ToggleHistory" />
+        <signal name="Tracking">
+            <arg type="b" direction="out" />
+        </signal>
+        <property name="Active" type="b" access="read" />
+    </interface>;
+const GPasteProxy = Gio.DBusProxy.makeProxyWrapper(GPasteInterface);
+
+function GPasteIndicator() {
+    this._init.apply(this, arguments);
+}
+
+GPasteIndicator.prototype = {
+    __proto__: PanelMenu.SystemStatusButton.prototype,
+
+    _init: function() {
+        PanelMenu.SystemStatusButton.prototype._init.call(this, 'edit-paste-symbolic');
+        this._killSwitch = new PopupMenu.PopupSwitchMenuItem(_("Track changes"), true);
+        this._killSwitch.connect('toggled', Lang.bind(this, this._toggleDaemon));
+        this._proxy = new GPasteProxy(Gio.DBus.session, BUS_NAME, OBJECT_PATH);
+        this._proxy.connectSignal('Changed', Lang.bind(this, this._updateHistory));
+        this._proxy.connectSignal('ToggleHistory', Lang.bind(this, this._toggleHistory));
+        this._proxy.connectSignal('Tracking', Lang.bind(this, function(proxy, sender, [trackingState]) {
+            this._trackingStateChanged(trackingState);
+        }));
+        this._createHistory();
+        this._noHistory = new PopupMenu.PopupMenuItem("");
+        this._noHistory.setSensitive(false);
+        this._emptyHistory = new PopupMenu.PopupMenuItem(_("Empty history"));
+        this._emptyHistory.connect('activate', Lang.bind(this, this._empty));
+        this._fillMenu();
+    },
+
+    _select: function(index) {
+        this._proxy.SelectRemote(index);
+    },
+
+    _delete: function(index) {
+        this._proxy.DeleteRemote(index);
+    },
+
+    _empty: function() {
+        this._proxy.EmptyRemote();
+    },
+
+    _trackingStateChanged: function(trackingState) {
+        this._killSwitch.setToggleState(trackingState);
+    },
+
+    _toggleDaemon: function() {
+        this._proxy.TrackRemote(this._killSwitch.state);
+    },
+
+    _fillMenu: function() {
+        let active = this._proxy.Active;
+        if (active != null)
+            this._killSwitch.setToggleState(active);
+        this.menu.addMenuItem(this._killSwitch);
+        this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());
+        this._addHistoryItems();
+        this.menu.addMenuItem(this._noHistory);
+        this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());
+        this.menu.addMenuItem(this._emptyHistory);
+        this.menu.addSettingsAction(_("GPaste daemon settings"), 'gpaste-settings.desktop');
+        this._updateHistory();
+    },
+
+    _updateHistory: function() {
+        this._proxy.GetHistoryRemote(Lang.bind(this, function(result, err) {
+            let [history] = err ? [null] : result;
+            if (history != null && history.length != 0) {
+                let limit = Math.min(history.length, this._history.length);
+                for (let index = 0; index < limit; ++index)
+                    this._updateHistoryItem(index, history[index]);
+                this._hideHistory(limit);
+                this._noHistory.actor.hide();
+                this._emptyHistory.actor.show();
+            } else {
+                this._noHistory.label.text = (history == null) ? _("(Couldn't connect to GPaste daemon)") : _("(Empty)");
+                this._hideHistory();
+                this._emptyHistory.actor.hide();
+                this._noHistory.actor.show();
+            }
+        }));
+    },
+
+    _toggleHistory: function() {
+        this.menu.toggle();
+    },
+
+    _createHistoryItem: function(index) {
+        let item = new PopupMenu.PopupAlternatingMenuItem("");
+        item.actor.set_style_class_name('popup-menu-item');
+        let label = item.label;
+        label.clutter_text.max_length = 60;
+        label.clutter_text.ellipsize = Pango.EllipsizeMode.END;
+        item.connect('activate', Lang.bind(this, function(actor, event) {
+            if (item.state == PopupMenu.PopupAlternatingMenuItemState.DEFAULT) {
+                this._select(index);
+                return false;
+            } else {
+                this._delete(index);
+                return true;
+            }
+        }));
+        return item;
+    },
+
+    _createHistory: function() {
+        this._history = [];
+        for (let index = 0; index < 20; ++index)
+            this._history[index] = this._createHistoryItem(index);
+        this._history[0].actor.set_style("font-weight: bold;");
+    },
+
+    _addHistoryItems: function() {
+        for (let index = 0; index < this._history.length; ++index)
+            this.menu.addMenuItem(this._history[index]);
+    },
+
+    _updateHistoryItem: function(index, element) {
+        let displayStr = element.replace(/\n/g, ' ');
+        let altDisplayStr = _("delete: %s").format(displayStr);
+        this._history[index].updateText(displayStr, altDisplayStr);
+        this._history[index].actor.show();
+    },
+
+    _hideHistory: function(startIndex) {
+        for (let index = startIndex || 0; index < this._history.length; ++index)
+            this._history[index].actor.hide();
+    },
+
+    _onStateChanged: function (state) {
+        this._proxy.OnExtensionStateChangedRemote(state);
+    }
+};
+
+let _indicator;
+
+function init(metadata) {
+    Gettext.bindtextdomain('gpaste', metadata.localedir);
+    StatusIconDispatcher.STANDARD_TRAY_ICON_IMPLEMENTATIONS['gpaste-applet'] = 'gpaste';
+    Panel.STANDARD_STATUS_AREA_ORDER.unshift('gpaste');
+}
+
+function enable() {
+    _indicator = new GPasteIndicator();
+    _indicator._onStateChanged (true);
+    Main.panel.addToStatusArea('gpaste', _indicator);
+}
+
+function disable() {
+    _indicator._onStateChanged (false);
+    _indicator.destroy();
+}
+
